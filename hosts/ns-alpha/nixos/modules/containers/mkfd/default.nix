# Auto-generated using compose2nix v0.3.1.
{
  pkgs,
  lib,
  config,
  ...
}:

{
  sops.secrets."mkfd.env" = {
    format = "dotenv";
    sopsFile = ./.env;
  };
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."mkfd-mkfd" = {
    image = "tbosk/mkfd:latest";
    environmentFiles = [
      config.sops.secrets."mkfd.env".path
    ];
    volumes = [
      "mkfd-data:/app/configs:rw"
    ];
    ports = [
      "3005:5000/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=mkfd"
      "--network=mkfd_default"
    ];
  };
  systemd.services."docker-volume-mkfd-data" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect mkfd-data || docker volume create mkfd-data
    '';
    partOf = [ "docker-compose-mkfd-root.target" ];
    wantedBy = [ "docker-compose-mkfd-root.target" ];
  };
  systemd.services."docker-mkfd-mkfd" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-mkfd_default.service"
    ];
    requires = [
      "docker-network-mkfd_default.service"
    ];
    partOf = [
      "docker-compose-mkfd-root.target"
    ];
    wantedBy = [
      "docker-compose-mkfd-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-mkfd_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f mkfd_default";
    };
    script = ''
      docker network inspect mkfd_default || docker network create mkfd_default
    '';
    partOf = [ "docker-compose-mkfd-root.target" ];
    wantedBy = [ "docker-compose-mkfd-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-mkfd-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
